import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const browserInfo = await request.json()

    if (!browserInfo.name || !browserInfo.version) {
      return NextResponse.json({ error: "Browser information is required" }, { status: 400 })
    }

    // Mock vulnerability database (in real implementation, query NVD/CVE databases)
    const vulnerabilityDatabase = {
      Chrome: {
        "120.0.0.0": [],
        "119.0.0.0": [
          {
            cveId: "CVE-2023-6345",
            severity: "high" as const,
            description: "Integer overflow in Skia graphics library",
            publishedDate: "2023-11-28",
            cvssScore: 8.8,
          },
        ],
        "118.0.0.0": [
          {
            cveId: "CVE-2023-5997",
            severity: "critical" as const,
            description: "Use after free in WebRTC",
            publishedDate: "2023-11-15",
            cvssScore: 9.6,
          },
          {
            cveId: "CVE-2023-6345",
            severity: "high" as const,
            description: "Integer overflow in Skia graphics library",
            publishedDate: "2023-11-28",
            cvssScore: 8.8,
          },
        ],
      },
      Firefox: {
        "120.0": [],
        "119.0": [
          {
            cveId: "CVE-2023-6204",
            severity: "medium" as const,
            description: "Out-of-bounds write in WebGL",
            publishedDate: "2023-11-21",
            cvssScore: 6.5,
          },
        ],
      },
      Safari: {
        "17.1": [],
        "17.0": [
          {
            cveId: "CVE-2023-42916",
            severity: "high" as const,
            description: "Out-of-bounds read in WebKit",
            publishedDate: "2023-12-11",
            cvssScore: 8.1,
          },
        ],
      },
    }

    const browserName = browserInfo.name
    const browserVersion = browserInfo.version

    // Get vulnerabilities for this browser version
    const browserVulns = vulnerabilityDatabase[browserName as keyof typeof vulnerabilityDatabase] || {}
    const vulnerabilities = browserVulns[browserVersion as keyof typeof browserVulns] || []

    // Determine recommended version (latest secure version)
    const recommendedVersions = {
      Chrome: "120.0.6099.129",
      Firefox: "121.0",
      Safari: "17.2",
    }

    const recommendedVersion = recommendedVersions[browserName as keyof typeof recommendedVersions] || "Latest version"
    const isSecure = vulnerabilities.length === 0

    const result = {
      tool: "browser-vulnerability-scanner.check",
      timestamp: new Date().toISOString(),
      browser: browserInfo,
      vulnerabilities,
      recommendedVersion,
      isSecure,
      scanId: crypto.randomUUID(),
    }

    return NextResponse.json(result)
  } catch (error) {
    console.error("Browser scan error:", error)
    return NextResponse.json({ error: "Scan failed" }, { status: 500 })
  }
}
