"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"
import { AlertTriangle, Shield, Chrome, ChromeIcon as Firefox, AppleIcon as Safari, Globe } from "lucide-react"

interface BrowserInfo {
  name: string
  version: string
  userAgent: string
}

interface VulnerabilityResult {
  browser: BrowserInfo
  vulnerabilities: Array<{
    cveId: string
    severity: "low" | "medium" | "high" | "critical"
    description: string
    publishedDate: string
    cvssScore: number
  }>
  recommendedVersion: string
  isSecure: boolean
  timestamp: string
}

export default function BrowserVulnerabilityScanner() {
  const [browserInfo, setBrowserInfo] = useState<BrowserInfo | null>(null)
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState<VulnerabilityResult | null>(null)

  useEffect(() => {
    // Detect browser information
    const userAgent = navigator.userAgent
    let browserName = "Unknown"
    let version = "Unknown"

    if (userAgent.includes("Chrome")) {
      browserName = "Chrome"
      const match = userAgent.match(/Chrome\/(\d+\.\d+\.\d+\.\d+)/)
      version = match ? match[1] : "Unknown"
    } else if (userAgent.includes("Firefox")) {
      browserName = "Firefox"
      const match = userAgent.match(/Firefox\/(\d+\.\d+)/)
      version = match ? match[1] : "Unknown"
    } else if (userAgent.includes("Safari") && !userAgent.includes("Chrome")) {
      browserName = "Safari"
      const match = userAgent.match(/Version\/(\d+\.\d+)/)
      version = match ? match[1] : "Unknown"
    }

    setBrowserInfo({ name: browserName, version, userAgent })
  }, [])

  const scanBrowser = async () => {
    if (!browserInfo) return

    setLoading(true)
    try {
      const response = await fetch("/api/tools/browser-vulnerability-scanner", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(browserInfo),
      })

      const data = await response.json()
      setResult(data)
    } catch (error) {
      console.error("Scan failed:", error)
    } finally {
      setLoading(false)
    }
  }

  const getBrowserIcon = (name: string) => {
    switch (name.toLowerCase()) {
      case "chrome":
        return <Chrome className="w-5 h-5" />
      case "firefox":
        return <Firefox className="w-5 h-5" />
      case "safari":
        return <Safari className="w-5 h-5" />
      default:
        return <Globe className="w-5 h-5" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "low":
        return "bg-blue-500/20 text-blue-400"
      case "medium":
        return "bg-yellow-500/20 text-yellow-400"
      case "high":
        return "bg-orange-500/20 text-orange-400"
      case "critical":
        return "bg-red-500/20 text-red-400"
      default:
        return "bg-gray-500/20 text-gray-400"
    }
  }

  return (
    <div className="space-y-6">
      {browserInfo && (
        <Card className="cyber-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {getBrowserIcon(browserInfo.name)}
              Detected Browser
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div>
              <Label className="text-sm font-medium">Browser</Label>
              <p className="text-sm text-muted-foreground mt-1">{browserInfo.name}</p>
            </div>
            <div>
              <Label className="text-sm font-medium">Version</Label>
              <p className="text-sm text-muted-foreground mt-1">{browserInfo.version}</p>
            </div>
            <div>
              <Label className="text-sm font-medium">User Agent</Label>
              <p className="text-xs text-muted-foreground mt-1 break-all">{browserInfo.userAgent}</p>
            </div>
          </CardContent>
        </Card>
      )}

      <Button onClick={scanBrowser} disabled={loading || !browserInfo} className="w-full cyber-button">
        {loading ? "Scanning for Vulnerabilities..." : "Scan Browser Security"}
      </Button>

      {result && (
        <Card className="cyber-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {result.isSecure ? (
                <Shield className="w-5 h-5 text-success" />
              ) : (
                <AlertTriangle className="w-5 h-5 text-destructive" />
              )}
              Security Assessment
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-2">
              <Badge variant={result.isSecure ? "default" : "destructive"}>
                {result.isSecure ? "SECURE" : "VULNERABLE"}
              </Badge>
              <span className="text-sm text-muted-foreground">
                {result.vulnerabilities.length} vulnerabilities found
              </span>
            </div>

            {result.vulnerabilities.length > 0 && (
              <div>
                <Label className="text-sm font-medium">Known Vulnerabilities</Label>
                <div className="space-y-3 mt-2">
                  {result.vulnerabilities.map((vuln, index) => (
                    <div key={index} className="border border-primary/20 rounded-lg p-3">
                      <div className="flex items-center justify-between mb-2">
                        <code className="text-sm font-mono">{vuln.cveId}</code>
                        <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity.toUpperCase()}</Badge>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">{vuln.description}</p>
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <span>CVSS: {vuln.cvssScore}/10</span>
                        <span>Published: {new Date(vuln.publishedDate).toLocaleDateString()}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div>
              <Label className="text-sm font-medium">Recommended Version</Label>
              <p className="text-sm text-muted-foreground mt-1">{result.recommendedVersion}</p>
            </div>

            <div className="text-xs text-muted-foreground">Scanned: {new Date(result.timestamp).toLocaleString()}</div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
