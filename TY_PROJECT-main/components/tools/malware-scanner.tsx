"use client"
import { useState, useRef } from "react"
import type React from "react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { AlertTriangle, Shield, Upload, File, Scan, Activity } from "lucide-react"

interface ScanResult {
  fileName: string
  fileSize: number
  fileType: string
  scanTime: number
  threats: Array<{
    name: string
    type: string
    severity: "low" | "medium" | "high" | "critical"
    description: string
    location: string
  }>
  signatures: Array<{
    engine: string
    result: string
    version: string
  }>
  behaviorAnalysis: {
    suspiciousProcesses: string[]
    networkActivity: string[]
    fileModifications: string[]
    registryChanges: string[]
  }
  riskScore: number
  threatLevel: "CLEAN" | "SUSPICIOUS" | "INFECTED" | "MALICIOUS"
}

export function MalwareScanner() {
  const [file, setFile] = useState<File | null>(null)
  const [scanning, setScanning] = useState(false)
  const [progress, setProgress] = useState(0)
  const [result, setResult] = useState<ScanResult | null>(null)
  const [error, setError] = useState("")
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0]
    if (selectedFile) {
      // Check file size (limit to 100MB for demo)
      if (selectedFile.size > 100 * 1024 * 1024) {
        setError("File size must be less than 100MB")
        return
      }
      setFile(selectedFile)
      setError("")
      setResult(null)
    }
  }

  const scanFile = async () => {
    if (!file) {
      setError("Please select a file to scan")
      return
    }

    setScanning(true)
    setProgress(0)
    setError("")
    setResult(null)

    try {
      // Simulate scanning progress
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 95) {
            clearInterval(progressInterval)
            return 95
          }
          return prev + Math.random() * 15
        })
      }, 200)

      const formData = new FormData()
      formData.append("file", file)

      const response = await fetch("/api/scan-malware", {
        method: "POST",
        body: formData,
      })

      clearInterval(progressInterval)
      setProgress(100)

      if (!response.ok) {
        throw new Error("Failed to scan file")
      }

      const data = await response.json()
      setResult(data)
    } catch (err) {
      setError("Failed to scan file. Please try again.")
    } finally {
      setScanning(false)
      setTimeout(() => setProgress(0), 1000)
    }
  }

  const getThreatColor = (level: string) => {
    switch (level) {
      case "CLEAN":
        return "text-green-400 border-green-400 bg-green-400/10"
      case "SUSPICIOUS":
        return "text-yellow-400 border-yellow-400 bg-yellow-400/10"
      case "INFECTED":
        return "text-orange-400 border-orange-400 bg-orange-400/10"
      case "MALICIOUS":
        return "text-red-400 border-red-400 bg-red-400/10"
      default:
        return "text-gray-400 border-gray-400 bg-gray-400/10"
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "low":
        return "bg-blue-500/20 text-blue-400"
      case "medium":
        return "bg-yellow-500/20 text-yellow-400"
      case "high":
        return "bg-orange-500/20 text-orange-400"
      case "critical":
        return "bg-red-500/20 text-red-400"
      default:
        return "bg-gray-500/20 text-gray-400"
    }
  }

  return (
    <div className="space-y-6">
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="flex items-center text-primary">
            <Scan className="h-5 w-5 mr-2" />
            Malware Detection Engine
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-2 border-dashed border-primary/30 rounded-lg p-8 text-center">
            <input type="file" ref={fileInputRef} onChange={handleFileSelect} className="hidden" accept="*/*" />
            {file ? (
              <div className="space-y-2">
                <File className="h-12 w-12 mx-auto text-primary" />
                <p className="font-medium text-primary">{file.name}</p>
                <p className="text-sm text-muted-foreground">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                <Button onClick={() => fileInputRef.current?.click()} variant="outline" size="sm">
                  Change File
                </Button>
              </div>
            ) : (
              <div className="space-y-2">
                <Upload className="h-12 w-12 mx-auto text-muted-foreground" />
                <p className="text-muted-foreground">Click to select a file for scanning</p>
                <Button onClick={() => fileInputRef.current?.click()} className="cyber-button">
                  Select File
                </Button>
              </div>
            )}
          </div>

          {scanning && (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span>Scanning for threats...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>
          )}

          <Button onClick={scanFile} disabled={!file || scanning} className="cyber-button w-full">
            {scanning ? (
              <div className="flex items-center">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2"></div>
                Scanning File...
              </div>
            ) : (
              <>
                <Scan className="h-4 w-4 mr-2" />
                Start Malware Scan
              </>
            )}
          </Button>

          {error && <div className="p-3 bg-red-500/10 border border-red-500/20 rounded-lg text-red-400">{error}</div>}
        </CardContent>
      </Card>

      {result && (
        <div className="space-y-4">
          {/* Scan Summary */}
          <Card className="cyber-card">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center text-primary">
                  <Shield className="h-5 w-5 mr-2" />
                  Scan Results
                </span>
                <Badge className={getThreatColor(result.threatLevel)}>{result.threatLevel}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary">{result.riskScore}/100</div>
                  <div className="text-sm text-muted-foreground">Risk Score</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-400">{result.threats.length}</div>
                  <div className="text-sm text-muted-foreground">Threats Found</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-400">{result.signatures.length}</div>
                  <div className="text-sm text-muted-foreground">Engine Results</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-primary">{result.scanTime}s</div>
                  <div className="text-sm text-muted-foreground">Scan Time</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Detected Threats */}
          {result.threats.length > 0 && (
            <Card className="cyber-card">
              <CardHeader>
                <CardTitle className="flex items-center text-red-400">
                  <AlertTriangle className="h-5 w-5 mr-2" />
                  Detected Threats
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {result.threats.map((threat, index) => (
                  <div key={index} className="border border-red-500/20 rounded-lg p-4 bg-red-500/5">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-bold text-red-400">{threat.name}</h4>
                      <Badge className={getSeverityColor(threat.severity)}>{threat.severity.toUpperCase()}</Badge>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{threat.description}</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="text-primary">Type:</span> {threat.type}
                      </div>
                      <div>
                        <span className="text-primary">Location:</span> {threat.location}
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Behavior Analysis */}
          <Card className="cyber-card">
            <CardHeader>
              <CardTitle className="flex items-center text-yellow-400">
                <Activity className="h-5 w-5 mr-2" />
                Behavior Analysis
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {result.behaviorAnalysis.suspiciousProcesses.length > 0 && (
                <div>
                  <h4 className="font-medium text-primary mb-2">Suspicious Processes</h4>
                  <ul className="space-y-1">
                    {result.behaviorAnalysis.suspiciousProcesses.map((process, idx) => (
                      <li key={idx} className="text-sm text-muted-foreground">
                        • {process}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              {result.behaviorAnalysis.networkActivity.length > 0 && (
                <div>
                  <h4 className="font-medium text-primary mb-2">Network Activity</h4>
                  <ul className="space-y-1">
                    {result.behaviorAnalysis.networkActivity.map((activity, idx) => (
                      <li key={idx} className="text-sm text-muted-foreground">
                        • {activity}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Engine Results */}
          <Card className="cyber-card">
            <CardHeader>
              <CardTitle className="flex items-center text-primary">
                <Scan className="h-5 w-5 mr-2" />
                Detection Engine Results
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {result.signatures.map((signature, index) => (
                  <div key={index} className="border border-primary/20 rounded-lg p-3">
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-primary">{signature.engine}</span>
                      <Badge
                        className={
                          signature.result === "Clean" ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"
                        }
                      >
                        {signature.result}
                      </Badge>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">v{signature.version}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
