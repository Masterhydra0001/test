"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { AlertTriangle, Shield, Code, CheckCircle, XCircle } from "lucide-react"

interface XSSTestResult {
  url: string
  vulnerable: boolean
  riskLevel: "Low" | "Medium" | "High" | "Critical"
  vulnerabilities: {
    type: string
    parameter: string
    payload: string
    location: string
    description: string
  }[]
  recommendations: string[]
}

export default function XSSVulnerabilityTester() {
  const [url, setUrl] = useState("")
  const [isScanning, setIsScanning] = useState(false)
  const [result, setResult] = useState<XSSTestResult | null>(null)

  const testXSS = async () => {
    if (!url) return

    setIsScanning(true)

    // Simulate XSS testing with realistic patterns
    await new Promise((resolve) => setTimeout(resolve, 2500))

    const xssPayloads = [
      "<script>alert('XSS')</script>",
      "javascript:alert('XSS')",
      "<img src=x onerror=alert('XSS')>",
      "';alert('XSS');//",
      "<svg onload=alert('XSS')>",
    ]

    const vulnerabilities = []
    const isVulnerable = Math.random() > 0.6 // 40% chance of vulnerability

    if (isVulnerable) {
      vulnerabilities.push({
        type: "Reflected XSS",
        parameter: "search",
        payload: "<script>alert('XSS')</script>",
        location: "URL parameter",
        description: "User input is reflected in the response without proper sanitization",
      })

      if (Math.random() > 0.5) {
        vulnerabilities.push({
          type: "DOM-based XSS",
          parameter: "fragment",
          payload: "#<img src=x onerror=alert('XSS')>",
          location: "URL fragment",
          description: "Client-side script processes user input unsafely",
        })
      }
    }

    const riskLevel = isVulnerable
      ? vulnerabilities.length > 2
        ? "Critical"
        : vulnerabilities.length > 1
          ? "High"
          : "Medium"
      : "Low"

    setResult({
      url,
      vulnerable: isVulnerable,
      riskLevel,
      vulnerabilities,
      recommendations: isVulnerable
        ? [
            "Implement proper input validation and output encoding",
            "Use Content Security Policy (CSP) headers",
            "Sanitize user input on both client and server side",
            "Use secure coding practices and frameworks",
            "Regular security testing and code review",
          ]
        : [
            "Continue using secure coding practices",
            "Implement CSP headers for additional protection",
            "Regular security assessments recommended",
          ],
    })

    setIsScanning(false)
  }

  const getRiskColor = (risk: string) => {
    switch (risk) {
      case "Critical":
        return "text-red-500 border-red-500"
      case "High":
        return "text-orange-500 border-orange-500"
      case "Medium":
        return "text-yellow-500 border-yellow-500"
      default:
        return "text-green-500 border-green-500"
    }
  }

  return (
    <div className="space-y-6">
      <div className="grid gap-4">
        <div>
          <Label htmlFor="url">Target URL</Label>
          <Input
            id="url"
            type="url"
            placeholder="https://example.com/search?q=test"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            className="cyber-input"
          />
        </div>

        <Button onClick={testXSS} disabled={!url || isScanning} className="cyber-button">
          {isScanning ? (
            <>
              <Code className="w-4 h-4 mr-2 animate-spin" />
              Testing XSS Vulnerabilities...
            </>
          ) : (
            <>
              <Code className="w-4 h-4 mr-2" />
              Test XSS Vulnerabilities
            </>
          )}
        </Button>
      </div>

      {result && (
        <div className="space-y-4">
          <Card className="cyber-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {result.vulnerable ? (
                  <XCircle className="w-5 h-5 text-red-500" />
                ) : (
                  <CheckCircle className="w-5 h-5 text-green-500" />
                )}
                XSS Vulnerability Test Results
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">Risk Level:</span>
                <Badge className={getRiskColor(result.riskLevel)}>{result.riskLevel}</Badge>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-sm text-muted-foreground">Status:</span>
                <span className={result.vulnerable ? "text-red-500" : "text-green-500"}>
                  {result.vulnerable ? "Vulnerable" : "Secure"}
                </span>
              </div>

              {result.vulnerabilities.length > 0 && (
                <div>
                  <h4 className="font-semibold mb-2 flex items-center gap-2">
                    <AlertTriangle className="w-4 h-4 text-orange-500" />
                    Detected Vulnerabilities
                  </h4>
                  <div className="space-y-2">
                    {result.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
                        <div className="font-medium text-red-400">{vuln.type}</div>
                        <div className="text-sm text-muted-foreground mt-1">
                          Parameter: <code className="bg-background px-1 rounded">{vuln.parameter}</code>
                        </div>
                        <div className="text-sm text-muted-foreground">Location: {vuln.location}</div>
                        <div className="text-sm text-muted-foreground">
                          Payload: <code className="bg-background px-1 rounded">{vuln.payload}</code>
                        </div>
                        <div className="text-sm mt-2">{vuln.description}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              <div>
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <Shield className="w-4 h-4 text-primary" />
                  Security Recommendations
                </h4>
                <ul className="space-y-1">
                  {result.recommendations.map((rec, index) => (
                    <li key={index} className="text-sm text-muted-foreground flex items-start gap-2">
                      <span className="text-primary mt-1">â€¢</span>
                      {rec}
                    </li>
                  ))}
                </ul>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}
