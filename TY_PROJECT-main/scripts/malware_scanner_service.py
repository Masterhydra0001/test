#!/usr/bin/env python3
"""
MOBICURE Malware Scanner Service
Advanced malware detection using multiple analysis techniques
"""

import sys
import json
import hashlib
import os
import time
import re
import zipfile
import tempfile
from datetime import datetime
from typing import Dict, List, Any

class MalwareScanner:
    def __init__(self):
        self.threat_signatures = {
            # Known malware hashes (MD5)
            "d41d8cd98f00b204e9800998ecf8427e": {"name": "Empty File", "severity": "low"},
            "5d41402abc4b2a76b9719d911017c592": {"name": "Test Malware", "severity": "high"},
            "098f6bcd4621d373cade4e832627b4f6": {"name": "Suspicious Script", "severity": "medium"},
        }
        
        self.suspicious_patterns = [
            (r'eval\s*\(', "Code Injection", "high"),
            (r'exec\s*\(', "Code Execution", "high"),
            (r'system\s*\(', "System Command", "medium"),
            (r'shell_exec', "Shell Execution", "high"),
            (r'base64_decode', "Encoded Content", "medium"),
            (r'CreateObject\s*\(', "Object Creation", "medium"),
            (r'WScript\.Shell', "Windows Script", "medium"),
            (r'cmd\.exe|powershell', "Command Line", "high"),
            (r'registry|regedit', "Registry Access", "medium"),
            (r'download|wget|curl', "Network Download", "medium"),
        ]
        
        self.engines = [
            {"name": "MOBICURE Engine", "version": "2.1.0"},
            {"name": "Signature Scanner", "version": "1.8.3"},
            {"name": "Heuristic Analyzer", "version": "3.2.1"},
            {"name": "Behavior Monitor", "version": "2.0.5"},
            {"name": "Pattern Detector", "version": "1.9.7"},
        ]

    def calculate_file_hash(self, file_path: str) -> Dict[str, str]:
        """Calculate multiple hashes for the file"""
        hashes = {}
        
        with open(file_path, 'rb') as f:
            content = f.read()
            hashes['md5'] = hashlib.md5(content).hexdigest()
            hashes['sha1'] = hashlib.sha1(content).hexdigest()
            hashes['sha256'] = hashlib.sha256(content).hexdigest()
        
        return hashes

    def analyze_file_content(self, file_path: str) -> Dict[str, Any]:
        """Analyze file content for suspicious patterns"""
        threats = []
        suspicious_processes = []
        network_activity = []
        file_modifications = []
        registry_changes = []
        
        try:
            # Try to read as text first
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
                # Check for suspicious patterns
                for pattern, threat_name, severity in self.suspicious_patterns:
                    matches = re.findall(pattern, content, re.IGNORECASE)
                    if matches:
                        threats.append({
                            "name": threat_name,
                            "type": "Pattern Detection",
                            "severity": severity,
                            "description": f"Detected {len(matches)} instances of {threat_name.lower()}",
                            "location": f"File content (pattern: {pattern})"
                        })
                        
                        # Add to behavior analysis
                        if "command" in threat_name.lower() or "shell" in threat_name.lower():
                            suspicious_processes.append(f"Potential command execution: {threat_name}")
                        if "download" in threat_name.lower() or "network" in threat_name.lower():
                            network_activity.append(f"Network activity detected: {threat_name}")
                        if "registry" in threat_name.lower():
                            registry_changes.append(f"Registry access: {threat_name}")
                
                # Check for encoded content
                if len(re.findall(r'[A-Za-z0-9+/]{50,}={0,2}', content)) > 5:
                    threats.append({
                        "name": "Base64 Encoded Content",
                        "type": "Encoding Detection",
                        "severity": "medium",
                        "description": "File contains large amounts of base64 encoded data",
                        "location": "File content"
                    })
                
                # Check for suspicious URLs
                url_pattern = r'https?://[^\s<>"\']+|www\.[^\s<>"\']+|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}[^\s<>"\']*'
                urls = re.findall(url_pattern, content)
                if urls:
                    suspicious_urls = [url for url in urls if any(sus in url.lower() for sus in ['bit.ly', 'tinyurl', 'pastebin', 'discord', 'telegram'])]
                    if suspicious_urls:
                        threats.append({
                            "name": "Suspicious URLs",
                            "type": "Network Threat",
                            "severity": "high",
                            "description": f"Found {len(suspicious_urls)} suspicious URLs",
                            "location": "Embedded URLs"
                        })
                        network_activity.extend([f"Suspicious URL: {url}" for url in suspicious_urls[:3]])
        
        except Exception as e:
            # Binary file or read error
            pass
        
        # Check if it's a ZIP/archive file
        try:
            if zipfile.is_zipfile(file_path):
                with zipfile.ZipFile(file_path, 'r') as zip_file:
                    file_list = zip_file.namelist()
                    
                    # Check for suspicious file names
                    suspicious_files = [f for f in file_list if any(ext in f.lower() for ext in ['.exe', '.scr', '.bat', '.cmd', '.vbs', '.js'])]
                    if suspicious_files:
                        threats.append({
                            "name": "Suspicious Archive Content",
                            "type": "Archive Analysis",
                            "severity": "high",
                            "description": f"Archive contains {len(suspicious_files)} potentially dangerous files",
                            "location": "Archive contents"
                        })
                        file_modifications.extend([f"Suspicious file in archive: {f}" for f in suspicious_files[:3]])
        except:
            pass
        
        return {
            "threats": threats,
            "behavior_analysis": {
                "suspicious_processes": suspicious_processes,
                "network_activity": network_activity,
                "file_modifications": file_modifications,
                "registry_changes": registry_changes
            }
        }

    def scan_file(self, file_path: str) -> Dict[str, Any]:
        """Perform comprehensive malware scan"""
        start_time = time.time()
        
        # Get file info
        file_stat = os.stat(file_path)
        file_name = os.path.basename(file_path)
        file_size = file_stat.st_size
        file_type = self.get_file_type(file_path)
        
        # Calculate hashes
        hashes = self.calculate_file_hash(file_path)
        
        # Analyze content
        analysis = self.analyze_file_content(file_path)
        
        # Check against known malware hashes
        hash_threats = []
        for hash_type, hash_value in hashes.items():
            if hash_value in self.threat_signatures:
                sig = self.threat_signatures[hash_value]
                hash_threats.append({
                    "name": f"Known Malware: {sig['name']}",
                    "type": "Hash Detection",
                    "severity": sig['severity'],
                    "description": f"File matches known malware signature ({hash_type.upper()})",
                    "location": f"{hash_type.upper()} hash"
                })
        
        # Combine all threats
        all_threats = hash_threats + analysis["threats"]
        
        # Calculate risk score
        risk_score = self.calculate_risk_score(all_threats, file_size, file_type)
        
        # Determine threat level
        threat_level = self.determine_threat_level(risk_score, len(all_threats))
        
        # Generate engine results
        signatures = []
        for engine in self.engines:
            result = "Clean"
            if len(all_threats) > 0:
                if any(t["severity"] in ["high", "critical"] for t in all_threats):
                    result = "Malware Detected"
                elif any(t["severity"] == "medium" for t in all_threats):
                    result = "Suspicious"
                else:
                    result = "Low Risk"
            
            signatures.append({
                "engine": engine["name"],
                "result": result,
                "version": engine["version"]
            })
        
        scan_time = round(time.time() - start_time, 1)
        
        return {
            "fileName": file_name,
            "fileSize": file_size,
            "fileType": file_type,
            "scanTime": scan_time,
            "threats": all_threats,
            "signatures": signatures,
            "behaviorAnalysis": analysis["behavior_analysis"],
            "riskScore": risk_score,
            "threatLevel": threat_level,
            "hashes": hashes,
            "timestamp": datetime.now().isoformat(),
            "service": "MOBICURE Malware Scanner v2.1.0"
        }

    def get_file_type(self, file_path: str) -> str:
        """Determine file type"""
        _, ext = os.path.splitext(file_path)
        ext = ext.lower()
        
        type_map = {
            '.exe': 'Windows Executable',
            '.dll': 'Dynamic Link Library',
            '.bat': 'Batch Script',
            '.cmd': 'Command Script',
            '.vbs': 'VBScript',
            '.js': 'JavaScript',
            '.jar': 'Java Archive',
            '.zip': 'ZIP Archive',
            '.rar': 'RAR Archive',
            '.pdf': 'PDF Document',
            '.doc': 'Word Document',
            '.docx': 'Word Document',
            '.xls': 'Excel Spreadsheet',
            '.xlsx': 'Excel Spreadsheet',
        }
        
        return type_map.get(ext, f'Unknown ({ext})')

    def calculate_risk_score(self, threats: List[Dict], file_size: int, file_type: str) -> int:
        """Calculate overall risk score (0-100)"""
        base_score = 0
        
        # Score based on threats
        for threat in threats:
            severity_scores = {"low": 10, "medium": 25, "high": 40, "critical": 60}
            base_score += severity_scores.get(threat["severity"], 0)
        
        # File type risk
        risky_types = ["Windows Executable", "Batch Script", "Command Script", "VBScript", "JavaScript"]
        if any(risky in file_type for risky in risky_types):
            base_score += 15
        
        # File size considerations
        if file_size < 1024:  # Very small files are suspicious
            base_score += 10
        elif file_size > 100 * 1024 * 1024:  # Very large files
            base_score += 5
        
        return min(100, base_score)

    def determine_threat_level(self, risk_score: int, threat_count: int) -> str:
        """Determine overall threat level"""
        if risk_score >= 70 or threat_count >= 3:
            return "MALICIOUS"
        elif risk_score >= 40 or threat_count >= 2:
            return "INFECTED"
        elif risk_score >= 20 or threat_count >= 1:
            return "SUSPICIOUS"
        else:
            return "CLEAN"

def main():
    if len(sys.argv) != 2:
        print(json.dumps({"error": "Usage: python3 malware_scanner_service.py <file_path>"}))
        sys.exit(1)
    
    file_path = sys.argv[1]
    
    if not os.path.exists(file_path):
        print(json.dumps({"error": "File not found"}))
        sys.exit(1)
    
    try:
        scanner = MalwareScanner()
        result = scanner.scan_file(file_path)
        print(json.dumps(result, indent=2))
    except Exception as e:
        print(json.dumps({"error": f"Scan failed: {str(e)}"}))
        sys.exit(1)

if __name__ == "__main__":
    main()
